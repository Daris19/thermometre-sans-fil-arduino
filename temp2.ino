#include <Wire.h>                     // Communication I2C (√©cran OLED, capteur)
#include "SHTSensor.h"               // Capteur de temp√©rature et humidit√© SHTC3
#include <FastLED.h>                 // Contr√¥le de la bande LED WS2811
#include <Adafruit_GFX.h>           // Biblioth√®que graphique (texte, dessin)
#include <Adafruit_SSD1306.h>       // Biblioth√®que pour √©cran OLED SSD1306

// === Param√®tres pour la bande LED ===
#define LED_PIN     4               // Broche de donn√©es connect√©e √† la bande LED
#define NUM_LEDS    21              // Nombre de LEDs WS2811
#define BRIGHTNESS  64              // Luminosit√© globale (0 √† 255)
#define LED_TYPE    WS2811          // Type de LED
#define COLOR_ORDER GRB             // Ordre des couleurs dans chaque LED
CRGB leds[NUM_LEDS];                // Tableau contenant l'√©tat de chaque LED

// === Param√®tres pour l'√©cran OLED ===
#define SCREEN_WIDTH 128            // Largeur de l'√©cran en pixels
#define SCREEN_HEIGHT 64            // Hauteur de l'√©cran en pixels
#define OLED_RESET    -1            // Pas de broche RESET utilis√©e
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// === Divers ===
#define UPDATES_PER_SECOND 100      // Vitesse de mise √† jour des LEDs
SHTSensor sht;                      // Objet pour le capteur SHTC3

void setup() {
  Serial.begin(115200);             // D√©marrage de la communication s√©rie
  Wire.begin();                     // Initialisation du bus I2C

  // === Initialisation de l'√©cran OLED ===
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("√âcran OLED non d√©tect√©"));
    while (1);                      // Bloque le programme si aucun √©cran n'est trouv√©
  }
  display.clearDisplay();           // Efface l'√©cran
  display.setTextSize(1);           // Taille du texte
  display.setTextColor(SSD1306_WHITE); // Couleur du texte (blanc)
  display.setCursor(0, 0);
  display.println("Initialisation...");
  display.display();                // Affiche le message

  // === Initialisation des LEDs ===
  FastLED.addLeds<LED_TYPE, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS)
         .setCorrection(TypicalLEDStrip); // Correction de couleur standard
  FastLED.setBrightness(BRIGHTNESS);      // R√©glage de la luminosit√©

  // === Initialisation du capteur SHTC3 ===
  sht.init();                           // D√©marrage du capteur
  sht.setAccuracy(SHTSensor::SHT_ACCURACY_MEDIUM); // Pr√©cision moyenne
}

void loop() {
  // === Lecture de temp√©rature et humidit√© ===
  sht.readSample();                      // Demande une nouvelle mesure
  float temp = sht.getTemperature();     // R√©cup√®re la temp√©rature en ¬∞C
  float hum  = sht.getHumidity();        // R√©cup√®re l‚Äôhumidit√© en %

  // === Affichage des donn√©es sur le port s√©rie (debug) ===
  Serial.print(F("[SHTC3] T:"));
  Serial.print(temp);
  Serial.print(F(" C¬∫  /   H: "));
  Serial.print(hum);
  Serial.println(F(" %"));

  // === Conversion en largeur de barres pour l'affichage graphique ===
  int tempBarWidth = map(temp, 20, 35, 0, SCREEN_WIDTH); // 20‚Äì35¬∞C ‚Üí 0‚Äì128 px
  int humBarWidth  = map(hum, 0, 100, 0, SCREEN_WIDTH);  // 0‚Äì100% ‚Üí 0‚Äì128 px

  // === Affichage OLED graphique + texte ===
  display.clearDisplay();                  // Efface l'√©cran
  display.setCursor(0, 0);
  display.print("Temp: ");
  display.print(temp, 1);
  display.println(" C");
  display.drawRect(0, 12, SCREEN_WIDTH, 8, SSD1306_WHITE);      // Cadre temp√©rature
  display.fillRect(0, 12, tempBarWidth, 8, SSD1306_WHITE);      // Remplissage

  display.setCursor(0, 24);
  display.print("Hum:  ");
  display.print(hum, 1);
  display.println(" %");
  display.drawRect(0, 36, SCREEN_WIDTH, 8, SSD1306_WHITE);      // Cadre humidit√©
  display.fillRect(0, 36, humBarWidth, 8, SSD1306_WHITE);       // Remplissage

  display.display();                        // Met √† jour l‚Äô√©cran

  // === Couleurs LED selon temp√©rature (3 zones) ===
  // R√©partition : 0‚Äì6 (rouge), 7‚Äì13 (vert), 14‚Äì20 (bleu) üß† Id√©e g√©n√©rale : D√©finir des plages de temp√©rature, par exemple : 
  //üü¶ < 22¬∞C ‚Üí BLEU (froid) 
 // üü© 22 √† 27¬∞C ‚Üí VERT (temp√©rature normale)//
//üü• > 27¬∞C ‚Üí ROUGE (chaleur)//

  for (int i = 0; i < NUM_LEDS; i++) {
    if (i < 7) {
      leds[i] = CRGB::Red;
    } else if (i < 14) {
      leds[i] = CRGB::Green;
    } else {
      leds[i] = CRGB::Blue;
    }
  }

  FastLED.show();                            // Met √† jour les LEDs
  FastLED.delay(1000 / UPDATES_PER_SECOND);  // Attente pour √©viter scintillement

  delay(2000); // Pause de 2 secondes avant la prochaine mesure
}
